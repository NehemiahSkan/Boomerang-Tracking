import cv2
import numpy as np
import math
import os
import matplotlib.pyplot as plt


class BoomerangTracker:
    def __init__(self, video_path):
        self.cap = cv2.VideoCapture(video_path)
        self.height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        self.width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        self.frpersec = int(self.cap.get(cv2.CAP_PROP_FPS))
        self.framecnt = int(self.cap.get(cv2.CAP_PROP_FRAME_COUNT))
        self.rect = None
        self.frames = []
        self.pos = []
        self.angle = []
    
    def __del__(self):
        self.cap.release()
        
    def preprocess(self, frame):
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        redlow = np.array([0, 150, 150])
        redhigh = np.array([10, 255, 255])
        mask_1 = cv2.inRange(hsv, redlow, redhigh)
        redlow = np.array([170, 150, 150])
        redhigh = np.array([180, 255, 255])
        mask_2 = cv2.inRange(hsv, redlow, redhigh)
        mask = cv2.bitwise_or(mask_1, mask_2)
        return cv2.medianBlur(mask, 5)

    def get_boomerang_contours(self, frame):
        """
        find and return the contours of the boomerang in the current frame.

        param frame: The current frame as a numpy array.
        return: A list of contours representing the boomerang, or None if the boomerang is not found.
        """
        # apply necessary image processing to frame
        processed_frame = self.preprocess_frame(frame)

        # detect red color in frame
        maskedred = self.detect_red(processed_frame)

        # find the edges in the red color mask using Canny edge detection
        edges = cv2.Canny(maskedred, self.canny_threshold1, self.canny_threshold2)

        # dilate edges to make them thicker and connect gap
        dilated_edges = cv2.dilate(edges, self.dilate_kernel, iterations=self.dilate_iterations)

        # find contours in the dilated edges
        contours, hierarchy = cv2.findContours(dilated_edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # filter contours too small or too large to be boomerang
        filtered_contours = [contour for contour in contours if self.min_contour_area < cv2.contourArea(contour) < self.max_contour_area]

        # return filtered contours or None if boomerang is not found
        if filtered_contours:
            return filtered_contours
        else:
            return None

    def get_angle(self):
        """Get the angle between the boomerang and the horizontal axis"""
        if self.boomerang_contour is None:
            raise ValueError("Boomerang contour not found.")
        # get the bounding rectangle of boomerang contour
        x, y, w, h = cv2.boundingRect(self.boomerang_contour)
        # get the center of the bounding rectangle
        center_x = x + w / 2
        center_y = y + h / 2
        # find endpoints of major axis fors bounding ellipse
        (major_axis_x, major_axis_y), (minor_axis_x, minor_axis_y), _ = cv2.fitEllipse(self.boomerang_contour)
        # find angle between major axis and horizontal axis
        angle = math.atan2(major_axis_y - center_y, major_axis_x - center_x)
        # convert angles to degrees
        angle_degrees = math.degrees(angle)
        return angle_degrees
    
    def track(self, frame):
        # preprocess the frame to extract red regions
        maskedred = self.preprocess(frame)

        # find contours of red regions in frame
        contours, hierarchy = cv2.findContours(maskedred, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # find most likely contour to b boomerang
        boomerang_contour = self.get_boomerang_contours(frame)

        if boomerang_contour == None:
            return None, None

        # Get the angle of the boomerang contour
        angle = self.get_angle()

        # Draw the contour and angle on the frame
        cv2.drawContours(frame, [boomerang_contour], -1, (0, 255, 0), 2)
        cv2.putText(frame, f"Angle: {angle:.2f} degrees", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

        return boomerang_contour, angle


    def plot_position(self):
        if len(self.pos) == 0:
            print("No pos to plot")
            return
        
        # Create a numpy array of pos
        pos = np.array(self.pos)
        
        # Create a figure and axis object
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Plot the x and y pos over time
        ax.plot(pos[:, 0], label="x position")
        ax.plot(pos[:, 1], label="y position")
        
        # Add title and axis labels
        ax.set_title("Boomerang Position over Time")
        ax.set_xlabel("Frame")
        ax.set_ylabel("Position (pixels)")
        
        # Add legend and grid
        ax.legend()
        ax.grid()
        
        # Show the plot
        plt.show()

    def plot_angle(self):
        """ Plot the angle of the boomerang with respect to time."""
        time = np.arange(len(self.angle)) / self.frpersec
        plt.plot(time, self.angle)
        plt.xlabel('Time (s)')
        plt.ylabel('Angle (degrees)')
        plt.title('Boomerang Angle vs Time')
        plt.show()

    def display_video(self):
        """ Displays the original video with the boomerang contour and angle overlaid. """
        # Create a VideoWriter object to save the output video
        output_file = os.path.splitext(os.path.basename(self.video_path))[0] + "_output.mp4"
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")
        writer = cv2.VideoWriter(output_file, fourcc, self.frpersec, (self.width, self.height), True)

        # Loop over each frame of the video
        for i, frame in enumerate(self.frames):
            # Get the boomerang contour and angle for the current frame
            boomerang_contour, angle = self.track(frame)

            # If boomerang is found, add its position and angle to the list
            if boomerang_contour is not None:
                x, y, w, h = cv2.boundingRect(boomerang_contour)
                self.pos.append((x + w/2, y + h/2))
                self.angle.append(angle)

            # Plot position and angle of boomerang on the current frame
            self.plot_position(frame, i)
            self.plot_angle(frame, i)

            # Display current frame with boomerang contour and angle overlaid
            cv2.imshow("Video", frame)

            # Write current frame to output video
            writer.write(frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        # Release video writer and destroy all windows
        writer.release()
        cv2.destroyAllWindows()

def get_largest_contour(contours):
    """
    Returns the largest contour from a list of contours.

    :param contours: A list of contours.
    :return: The largest contour, or None if the list is empty.
    """
    if not contours:
        return None
    return max(contours, key=cv2.contourArea)

def detect_red(self, frame):
    """
    Detect red regions in the current frame.

    :param frame: The current frame as a numpy array.
    :return: A binary mask where white pixels represent red regions.
    """
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    redlow = np.array([0, 150, 150])
    redhigh = np.array([10, 255, 255])
    mask_1 = cv2.inRange(hsv, redlow, redhigh)
    redlow = np.array([170, 150, 150])
    redhigh = np.array([180, 255, 255])
    mask_2 = cv2.inRange(hsv, redlow, redhigh)
    mask = cv2.bitwise_or(mask_1, mask_2)
    return mask

def main():
    # create instance of BoomerangTracker with the path to the video file
    tracker = BoomerangTracker("DJI_0014.mp4")
    
    # loop over the frames in the video
    for i in range(tracker.framecnt):
        # read the next frame
        ret, frame = tracker.cap.read()

        # check if frame was read successfully
        if not ret:
            break

        # track boomerang in the current frame
        boomerang_contour, angle = tracker.track(frame)

        # ff boomerang was found, store its position and angle
        if boomerang_contour is not None:
            # fet center of the bounding rectangle of contour as position
            x, y, w, h = cv2.boundingRect(boomerang_contour)
            center_x = x + w / 2
            center_y = y + h / 2
            position = [center_x, center_y]
            tracker.pos.append(position)
            tracker.angle.append(angle)

    # plot position of boomerang over time
    tracker.plot_position()

    # release capture object
    del tracker
